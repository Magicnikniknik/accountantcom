// static/js/cookie-consent.js
console.log('üç™ cookie-consent.js V2 (with Consent Mode) –∑–∞–≥—Ä—É–∂–µ–Ω');

(function() {
    const consentPropertyName = 'cookie_consent_status';
    const bannerId = 'cookie-consent-banner';
    const acceptBtnId = 'cookie-accept-btn';
    const declineBtnId = 'cookie-decline-btn';

    // --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å localStorage/cookie ---
    function saveConsentDecision(status) {
      try {
        localStorage.setItem(consentPropertyName, status);
        console.log(`[Cookie Consent] Consent status saved to localStorage: ${status}`); // –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–µ—Ñ–∏–∫—Å
      } catch (e) {
        console.error('[Cookie Consent] Could not save consent status in localStorage', e);
        const expiryDate = new Date();
        expiryDate.setFullYear(expiryDate.getFullYear() + 1);
        document.cookie = `${consentPropertyName}=${status}; expires=${expiryDate.toUTCString()}; path=/; SameSite=Lax`;
        console.log(`[Cookie Consent] Consent status saved to cookie as fallback: ${status}`); // –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–µ—Ñ–∏–∫—Å
      }
    }

    function hasMadeDecision() {
      let decision = null;
      let source = 'none'; // –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è
      try {
        decision = localStorage.getItem(consentPropertyName);
        if (decision !== null) {
          source = 'localStorage';
        }
      } catch (e) {
        console.warn('[Cookie Consent] Could not read consent status from localStorage', e);
      }

      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ localStorage, –ø—Ä–æ–≤–µ—Ä—è–µ–º cookie
      if (decision === null) {
        const matches = document.cookie.match(
          new RegExp('(?:^|; )' + consentPropertyName.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + '=([^;]*)')
        );
        if (matches) {
          decision = decodeURIComponent(matches[1]);
          source = 'cookie';
        }
      }

      // –õ–û–ì: –í—ã–≤–æ–¥–∏–º, —á—Ç–æ –Ω–∞—à–ª–∏ (–∏–ª–∏ –Ω–µ –Ω–∞—à–ª–∏)
      if (decision !== null) {
         console.log(`[Cookie Consent] Found prior decision '${decision}' from ${source}.`); // <-- –õ–û–ì 1 (—á—Ç–æ –Ω–∞—à–ª–∏)
         return true; // –†–µ—à–µ–Ω–∏–µ –±—ã–ª–æ –ø—Ä–∏–Ω—è—Ç–æ
      } else {
         console.log('[Cookie Consent] No prior decision found in localStorage or cookie.'); // <-- –õ–û–ì 2 (–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏)
         return false; // –†–µ—à–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –ø—Ä–∏–Ω—è—Ç–æ
      }
    }
    // --- –ö–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–π ---


    // --- –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Google Consent Mode ---
    function updateConsent(granted) {
       if (typeof gtag !== 'function') {
           console.error('[Cookie Consent] gtag function is not defined.'); // –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–µ—Ñ–∏–∫—Å
           return;
       }
       const consentState = {
           'analytics_storage': granted ? 'granted' : 'denied',
           // 'ad_storage': granted ? 'granted' : 'denied', // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
       };
       gtag('consent', 'update', consentState);
       console.log('[Cookie Consent] Google Consent Mode updated:', consentState); // –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–µ—Ñ–∏–∫—Å
       saveConsentDecision(granted ? 'granted' : 'denied'); // –°–æ—Ö—Ä–∞–Ω—è–µ–º 'granted' –∏–ª–∏ 'denied'
    }
    // --- –ö–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–∏ ---


    document.addEventListener('DOMContentLoaded', () => {
      console.log('[Cookie Consent] DOM Content Loaded'); // –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–µ—Ñ–∏–∫—Å
      const banner = document.getElementById(bannerId);
      if (!banner) {
        console.error('[Cookie Consent] Cookie banner element NOT found (ID: ' + bannerId + ')'); // –£—Ç–æ—á–Ω–∏–ª–∏ ID
        return;
      }
      console.log('[Cookie Consent] Cookie banner element FOUND:', banner); // –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–µ—Ñ–∏–∫—Å

      const acceptBtn = document.getElementById(acceptBtnId);
      const declineBtn = document.getElementById(declineBtnId);

      if (!acceptBtn) console.error('[Cookie Consent] Accept button NOT found (ID: ' + acceptBtnId + ')');
      if (!declineBtn) console.error('[Cookie Consent] Decline button NOT found (ID: ' + declineBtnId + ')');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –†–ê–ù–¨–®–ï
      const decisionMade = hasMadeDecision(); // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏

      if (!decisionMade) {
        console.log('[Cookie Consent] Trying to show banner...'); // –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–µ—Ñ–∏–∫—Å
        banner.hidden = false;
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        setTimeout(() => {
            try {
                const styles = window.getComputedStyle(banner);
                console.log('[Cookie Consent] Banner display style after setting hidden=false:', styles.display);
                if (styles.display === 'none') {
                    console.warn('[Cookie Consent] Banner display is "none" even after setting hidden=false. Check CSS conflicts or other scripts.');
                }
            } catch(e) {
                console.error('[Cookie Consent] Error getting computed style for banner', e);
            }
        }, 100);
      }
      // –ù–µ—Ç 'else', —Ç.–∫. hasMadeDecision —É–∂–µ –≤—ã–≤–µ–ª–∞ –ª–æ–≥, –µ—Å–ª–∏ —Ä–µ—à–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ¬´–ü—Ä–∏–Ω—è—Ç—å¬ª
      if (acceptBtn) {
        acceptBtn.addEventListener('click', (e) => {
          e.preventDefault(); // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –∏–ª–∏ —Ç–∏–ø submit
          console.log('[Cookie Consent] Accept button clicked.'); // –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–µ—Ñ–∏–∫—Å
          updateConsent(true);
          banner.hidden = true;
        });
      }

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ¬´–û—Ç–∫–ª–æ–Ω–∏—Ç—å¬ª
      if (declineBtn) {
        declineBtn.addEventListener('click', (e) => {
          e.preventDefault(); // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
          console.log('[Cookie Consent] Decline button clicked.'); // –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–µ—Ñ–∏–∫—Å
          updateConsent(false);
          banner.hidden = true;
        });
      }
    });
  })();